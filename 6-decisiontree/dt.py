# -*- coding: utf-8 -*-
"""dt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ce2mNuwBj_e02A9nFKrt2sY3kBJyk_SD
"""

import numpy as np
import pandas as pd
from sklearn import tree

#baca dataset dari file ke pandas dataframe
diabetDataset = pd.read_csv('diabetes_prediction_dataset.csv', delimiter=',', header=0)

diabetDataset.info()

diabetDataset

diabetDataset.columns

diabetDataset.diabetes

#hapus kolom gender
diabetDataset = diabetDataset.drop(labels="gender", axis=1)

#hapus kolom smoking history
diabetDataset = diabetDataset.drop(labels="smoking_history", axis=1)

#ubah dataFrame ke array
diabetDataset = diabetDataset.to_numpy()

print(diabetDataset)

#membagi dataset mjd 80 baris untuk train dan 20 test
dataTrain = np.concatenate((diabetDataset[0:40, :], diabetDataset[50:90, :]),
                           axis=0)
dataTest = np.concatenate((diabetDataset[40:50, :], diabetDataset[50:100, :]),
                           axis=0)

print(dataTrain)
len(dataTrain)

print(dataTest)
len(dataTest)

#bagi dataset ke input dan label
xTrain = dataTrain[:, 1:6]
xTest = dataTest[:, 1:6]
yTrain = dataTrain[:, 6]
yTest = dataTest[:, 6]

#definisi DecisionTreeClassifier
model = tree.DecisionTreeClassifier()

#training model
model = model.fit(xTrain, yTrain)

#prediksi Data Testing
hasilPrediksi = model.predict(xTest)
print("Label Sebenarnya : ", yTest)
print("Hasil Prediksi : ", hasilPrediksi)

#hitung akurasi
prediksiBenar = (hasilPrediksi == yTest).sum()
prediksiSalah = (hasilPrediksi != yTest).sum()
print("Prediksi Benar :", prediksiBenar, "data")
print("Prediksi Salah :", prediksiSalah, "data")
print("Akurasi :", prediksiBenar/(prediksiBenar+prediksiSalah) * 100, "%")

from sklearn.tree import DecisionTreeClassifier, export_graphviz
from IPython.display import Image
import graphviz
import pydotplus
# Train the decision tree classifier
clf = DecisionTreeClassifier()
clf.fit(xTrain, yTrain)

# Export the trained decision tree to a DOT file
dot_data = export_graphviz(clf, out_file=None,
                           class_names=['No','Yes'],
                           filled=True, rounded=True,  
                           special_characters=True)
graph = graphviz.Source(dot_data)

# Save the decision tree as a PNG image
graph.format = 'png'
graph.render('diabetes_decision_tree', view=True)