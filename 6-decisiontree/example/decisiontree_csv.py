# -*- coding: utf-8 -*-
"""decisiontree_Csv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12i62KNqAtIQ2OtMMbS-q7CRp89MgOi0a
"""

import numpy as np
import pandas as pd
from sklearn import tree

#baca dataset dari file ke pandas dataframe
irisDataset = pd.read_csv('Dataset Iris.csv', delimiter=';', header=0)

#u ubah kelas kolom species dari string ke unique-integer
irisDataset["Species"] = pd.factorize(irisDataset.Species)[0]

irisDataset.info()

irisDataset.columns

irisDataset.Species

irisDataset

#hapus kolom id
irisDataset = irisDataset.drop(labels="Id", axis=1)

#ubah dataFrame ke array
irisDataset = irisDataset.to_numpy()

print(irisDataset)

#membagi dataset mjd 80 baris untuk train dan 20 test
dataTrain = np.concatenate((irisDataset[0:40, :], irisDataset[50:90, :]),
                           axis=0)
dataTest = np.concatenate((irisDataset[40:50, :], irisDataset[50:100, :]),
                           axis=0)

print(dataTrain)
len(dataTrain)

print(dataTest)
len(dataTest)

#bagi dataset ke input dan label
inputTrain = dataTrain[:, 0:4]
inputTest = dataTest[:, 0:4]
labelTrain = dataTrain[:, 4]
labelTest = dataTest[:, 4]

#definisi DecisionTreeClassifier
model = tree.DecisionTreeClassifier()

#training model
model = model.fit(inputTrain, labelTrain)

#prediksi Data Testing
hasilPrediksi = model.predict(inputTest)
print("Label Sebenarnya : ", labelTest)
print("Hasil Prediksi : ", hasilPrediksi)

#hitung akurasi
prediksiBenar = (hasilPrediksi == labelTest).sum()
prediksiSalah = (hasilPrediksi != labelTest).sum()
print("Prediksi Benar :", prediksiBenar, "data")
print("Prediksi Salah :", prediksiSalah, "data")
print("Akurasi :", prediksiBenar/(prediksiBenar+prediksiSalah) * 100, "%")

from sklearn.tree import DecisionTreeClassifier, export_graphviz
from IPython.display import Image
import graphviz
import pydotplus
# Train the decision tree classifier
clf = DecisionTreeClassifier()
clf.fit(inputTrain, labelTrain)

# Export the trained decision tree to a DOT file
dot_data = export_graphviz(clf, out_file=None,
                           class_names=['Iris-versicolor','Iris-virginica'],
                           filled=True, rounded=True,  
                           special_characters=True)
graph = graphviz.Source(dot_data)

# Save the decision tree as a PNG image
graph.format = 'png'
graph.render('iris_decision_tree', view=True)