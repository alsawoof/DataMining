# -*- coding: utf-8 -*-
"""TA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AsTKILNhT6OIpNFqlC7iENlmAYSi9-qc

### **Melakukan prediksi mengenai gangguan tidur menggunakan kNN berdasarkan physical activity level dan heart rate.**

1. Importing libraries.
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from matplotlib.colors import ListedColormap
from sklearn.metrics import confusion_matrix, accuracy_score

"""Baca Dataset."""

#read dataset
data = pd.read_csv("Sleep_health_and_lifestyle_dataset.csv")
data.head()

"""2. Melakukan penghapusan data kolom yang tidak diperlukan."""

data.drop(columns="Person ID", inplace=True)

"""3. Ubah label menjadi numerik dengan label encoder dengan keterangan sebagai berikut:


*   0 = Insomnia
*   1 = None (Tidak memiliki gangguan tidur)
*   2 = Sleep Apnea


"""

data.groupby('Sleep Disorder').size()

y = data.iloc[:,-1].values

#Label encoding dengan labelencoder dengan 0 = Insomnia, 1 = None, 2 = Sleep Apnea
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

print(y)

"""4. Melakukan visualisasi data sebagai perbandingan faktor yang mempengaruhi gangguan tidur."""

#perbandingan dengan visualisasi data
#untuk yang mengalami masalah tidur berdasarkan durasi tidur, daily steps, heart rate, dll
plt.figure()
sns.pairplot(data.drop("Age", axis=1), hue = "Sleep Disorder", size=3, markers=["o", "s", "D"])
plt.show()

"""Untuk faktor yang digunakan sebagai prediksi kali ini adalah berdasarkan physical activity level dan heart rate."""

#berdasarkan physical activity level dan heart rate
x = data.iloc[:, [5,9]].values
print(x)

"""5. Melakukan model selection untuk membagi data menjadi data training dan data test."""

#Split menjadi data training dan data test dengan model selection
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

len(x_train)

len(x_test)

"""6. Mencari k optimal untuk melakukan prediksi dengan menggunakan cross validation score."""

from sklearn.model_selection import cross_val_score
from sklearn.neighbors import KNeighborsClassifier
k_list = list(range(1,30,2))

cv_scores = []

#perform 10-fold cross validation
for k in k_list:
    knn = KNeighborsClassifier(n_neighbors=k)
    scores = cross_val_score(knn, x_train, y_train, cv=10, scoring='accuracy')
    cv_scores.append(scores.mean())

#cek error
MSE = [1 - x for x in cv_scores]

plt.figure()
plt.figure(figsize=(15,10))
plt.title('The optimal number of neighbors', fontsize=20, fontweight='bold')
plt.xlabel('Number of Neighbors K', fontsize=15)
plt.ylabel('Misclassification Error', fontsize=15)
sns.set_style("whitegrid")
plt.plot(k_list, MSE)

plt.show()

#k yang paling optimal
best_k = k_list[MSE.index(min(MSE))]
print("The optimal number of neighbors is %d." % best_k)

"""7. Melakukan perbandingan klasifikasi berdasarkan beberapa angka yang berbeda. (untuk ini menggunakan angka 3, 5, 9, dan 12 sebagai percobaan)"""

#melakukan classifier dengan membandingkan beberapa k yang berbeda
#k = n_neighbors
classifiern3 = KNeighborsClassifier(n_neighbors = 3, metric = 'minkowski', p=2)
classifiern3.fit(x_train, y_train)

classifiern5 = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p=2)
classifiern5.fit(x_train, y_train)

classifiern9 = KNeighborsClassifier(n_neighbors = 9, metric = 'minkowski', p=2)
classifiern9.fit(x_train, y_train)

classifiern12 = KNeighborsClassifier(n_neighbors = 12, metric = 'minkowski', p=2)
classifiern12.fit(x_train, y_train)

y_predn3 = classifiern3.predict(x_test)

y_predn5 = classifiern5.predict(x_test)

y_predn9 = classifiern9.predict(x_test)

y_predn12 = classifiern12.predict(x_test)

print("Hasil prediksi untuk k=3: \n",y_predn3)

print("Hasil prediksi untuk k=5: \n",y_predn5)

print("Hasil prediksi untuk k=9: \n",y_predn9)

print("Hasil prediksi untuk k=12: \n",y_predn12)

print("Data test: \n",y_test)

"""8. Melakukan percobaan prediksi gangguan tidur dengan 2 sampel nilai aktivitas level dan detak jantung yang berbeda."""

#untuk coba prediksi sleep disorder berdasarkan physical activity dan juga heart ratenya
#dengan x1 = physical activity level dan x2 = heart rate
new_x1 = 30
new_x2 = 85
new_point = [(new_x1, new_x2)]

prediction3 = classifiern3.predict(new_point)
print(prediction3)

prediction5 = classifiern5.predict(new_point)
print(prediction5)

prediction9 = classifiern9.predict(new_point)
print(prediction9)

prediction12 = classifiern12.predict(new_point)
print(prediction12)

#untuk coba prediksi sleep disorder
#dengan x1 = physical activity level dan x2 = heart rate
new_x1 = 40
new_x2 = 82
new_point = [(new_x1, new_x2)]
prediction3 = classifiern3.predict(new_point)
print(prediction3)

prediction5 = classifiern5.predict(new_point)
print(prediction5)

prediction9 = classifiern9.predict(new_point)
print(prediction9)

prediction12 = classifiern12.predict(new_point)
print(prediction12)

"""9. Melakukan pengecekan akurasi prediksi dengan confusion matriks juga tingkat presisi, recall, accuracy, dan f1-score untuk masing-masing nilai k."""

#cek akurasi dengan confusion matriks
cm3 = confusion_matrix(y_test, y_predn3)
print("Confusion matriks untuk k=3: \n",cm3)

cm5 = confusion_matrix(y_test, y_predn5)
print("Confusion matriks untuk k=5: \n",cm5)

cm9 = confusion_matrix(y_test, y_predn9)
print("Confusion matriks untuk k=9: \n",cm9)

cm12 = confusion_matrix(y_test, y_predn12)
print("Confusion matriks untuk k=12: \n",cm12)

#untuk hitung persenan akurasi
akurasin3 = accuracy_score(y_test, y_predn3)*100
print('Akurasi untuk k=3 : ' + str(round(akurasin3, 2)) + '% \n')

akurasin5 = accuracy_score(y_test, y_predn5)*100
print('Akurasi untuk k=5 : ' + str(round(akurasin5, 2)) + '% \n')

akurasin9 = accuracy_score(y_test, y_predn9)*100
print('Akurasi untuk k=9 : ' + str(round(akurasin9, 2)) + '% \n')

akurasin12 = accuracy_score(y_test, y_predn12)*100
print('Akurasi untuk k=12: ' + str(round(akurasin12, 2)) + '% \n')

#untuk k=3
from sklearn.metrics import classification_report
print (classification_report(y_test, y_predn3))

#untuk k=5
from sklearn.metrics import classification_report
print (classification_report(y_test, y_predn5))

#untuk k=9
from sklearn.metrics import classification_report
print (classification_report(y_test, y_predn9))

#untuk k=12
from sklearn.metrics import classification_report
print (classification_report(y_test, y_predn12))